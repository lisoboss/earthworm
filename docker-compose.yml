version: "3.8"

services:
  client:
    image: local/earthworm:1.3.4
    build: .
    restart: always
    depends_on:
      - api
    env_file: "./apps/client/.env"
    ports:
      - 3012:3000
    command: 
      - npx
      - serve
      - apps/client/.output/public
  api:
    image: local/earthworm:1.3.4
    build: .
    restart: always
    depends_on:
      - db
      - redis
      - Logto
    env_file: "./apps/api/.env"
    ports:
      - 3013:3001
    command:
      - pnpm
      - prod:serve
  db:
    restart: always
    image: postgres:14-alpine
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_POSTGRES_PASSWORD}
      POSTGRES_DB: earthworm
    volumes:
      - data:/var/lib/postgres/main-data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:5-alpine
    restart: always
    volumes:
      - data:/var/lib/redis
  logto:
    restart: always
    depends_on:
      logtoPostgres:
        condition: service_healthy
    image: svhd/logto:1.18.0
    entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
    ports:
      - 3010:3010
      - 3011:3011
    environment:
      - TRUST_PROXY_HEADER=1
      - DB_URL=postgres://postgres:${LOGTO_POSTGRES_PASSWORD}@logtoPostgres:5432/logto
      # Mandatory for GitPod to map host env to the container, thus GitPod can dynamically configure the public URL of Logto;
      # Or, you can leverage it for local testing.
      - PORT=3010
      - ADMIN_PORT=3011
      - ENDPOINT
      - ADMIN_ENDPOINT
  logtoPostgres:
    restart: always
    image: postgres:14-alpine
    user: root
    volumes:
      - "./.volumes/logto_db:/var/lib/postgresql/data"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${LOGTO_POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  data:
    driver: local
